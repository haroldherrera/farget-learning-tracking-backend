AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for a web server using ECS + EC2

Parameters:
  VpcCidrBlock:
    Description: CidrBlock for the VPC
    Type: String
    Default: 10.0.0.0/16

  ECSAMI:
    Description: The Amazon Machine Image ID used for the cluster
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  ECRImage:
    Description: The ECR image of the docker container to be deployed
    Type: String

  DomainName:
    Description: The Domain name
    Type: String

  HostedZoneId:
    Description: The id of the hosted zone
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LearningTrackingVPC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - Ref: VpcCidrBlock
              - 4
              - 8
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - Ref: VpcCidrBlock
              - 4
              - 8
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Select:
          - 2
          - Fn::Cidr:
              - Ref: VpcCidrBlock
              - 4
              - 8
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::Select:
          - 3
          - Fn::Cidr:
              - Ref: VpcCidrBlock
              - 4
              - 8
      Tags:
        - Key: Name
          Value: PublicSubnetB

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Learning-tracking-IG
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Learning-tracking-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Learning-tracking-PrivateRouteTable

  PrivateSubnetAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable

  ECRRegistry:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.dkr
      VpcId:
        Ref: VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  ECRApi:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.api
      VpcId:
        Ref: VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  ECSAgent:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecs-agent
      VpcId:
        Ref: VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  ECSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecs
      VpcId:
        Ref: VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId:
        Ref: VPC
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  ECRTelemetry:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecs-telemetry
      VpcId:
        Ref: VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: VpcEndpointSecurityGroup

  ECRS3Bucket:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPC
      RouteTableIds:
        - Ref: PrivateRouteTable

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: LoadBalancerSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: Learning-Tracking-LoadBalancer-SG

  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: InstancesSecurityGroup
      GroupDescription: InstancesSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup
          FromPort: 32768
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Learning-Tracking-Instances-SG

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: VpcEndpointSecurityGroup
      GroupDescription: VpcEndpointSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: InstancesSecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: Learning-Tracking-Instances-SG

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: EC2Role

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  LaunchTemplateEC2:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: Learning-Tracking
      LaunchTemplateData:
        ImageId:
          Ref: ECSAMI
        InstanceType: t2.micro
        IamInstanceProfile:
          Name:
            Ref: EC2InstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - Ref: InstancesSecurityGroup
            DeleteOnTermination: true
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            echo "ECS_CLUSTER=${ECSCluster}" >> /etc/ecs/ecs.config

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - ECSCluster
      - EC2Role
    Properties:
      VPCZoneIdentifier:
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplateEC2
        Version:
          Fn::GetAtt: LaunchTemplateEC2.LatestVersionNumber
      MinSize: 1
      MaxSize: 15
      DesiredCapacity: 2
      TargetGroupARNs:
        - Ref: TargetGroup
      NewInstancesProtectedFromScaleIn: true

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: learning-tracking-capacity-provider
      AutoScalingGroupProvider:
        AutoScalingGroupArn:
          Ref: ECSAutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - Ref: CapacityProvider
      Cluster:
        Ref: ECSCluster
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider:
            Ref: CapacityProvider
          Weight: 1

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: learning-tracking
      Cpu: 512
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn:
        Ref: ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: learning-tracking
          Cpu: 512
          Memory: 512
          Image:
            Ref: ECRImage
          PortMappings:
            - ContainerPort: 3000
              HostPort: 0
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: /ecs/Nodejs-app
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Matcher:
        HttpCode: '200-299'
      Name: ECSTargetGroup
      TargetType: instance
      Port: 3000
      Protocol: HTTP
      ProtocolVersion: HTTP1
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_301

      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Ref: DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName:
            Ref: DomainName
          HostedZoneId:
            Ref: HostedZoneId
        - DomainName:
            Fn::Sub: www.${DomainName}
          HostedZoneId:
            Ref: HostedZoneId

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Ref: Certificate
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: 'This is the Default'
            StatusCode: 200
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS

  ListenerRuleHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: TargetGroup
                Weight: 1
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - Ref: DomainName
      ListenerArn:
        Ref: LoadBalancerListenerHTTPS
      Priority: 1

  Service:
    DependsOn:
      - LoadBalancer
      - TargetGroup
      - LoadBalancerListener
      - ECSCluster
      - ListenerRuleHTTPS
    Type: AWS::ECS::Service
    Properties:
      ServiceName: learning-tracking
      Cluster:
        Ref: ECSCluster
      PlacementStrategies:
        - Field: cpu
          Type: binpack
      CapacityProviderStrategy:
        - CapacityProvider:
            Ref: CapacityProvider
          Weight: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 300
      TaskDefinition:
        Ref: TaskDefinition
      LoadBalancers:
        - ContainerName: learning-tracking
          ContainerPort: 3000
          TargetGroupArn:
            Ref: TargetGroup

  ServiceScalableTarget:
    DependsOn:
      - Service
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 1
      ResourceId:
        Fn::Sub: service/${ECSCluster}/${Service.Name}
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    DependsOn: ServiceScalableTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSContainerServiceScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  Route53RecordSets:
    DependsOn: Service
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      RecordSets:
        - Name:
            Ref: DomainName
          Type: A
          AliasTarget:
            HostedZoneId:
              Fn::GetAtt:
                - LoadBalancer
                - CanonicalHostedZoneID
            DNSName:
              Fn::GetAtt:
                - LoadBalancer
                - DNSName
        - Name:
            Fn::Sub: www.${DomainName}
          Type: A
          AliasTarget:
            HostedZoneId:
              Fn::GetAtt:
                - LoadBalancer
                - CanonicalHostedZoneID
            DNSName:
              Fn::GetAtt:
                - LoadBalancer
                - DNSName
