AWSTemplateFormatVersion: 2010-09-09
Description: Creates the infrastructure for the ECS Container to be deployed

Parameters:
  Environment:
    Description: development | stage |production
    Type: String
    AllowedValues:
      - development
      - stage
      - production

  ECSAMI:
    Type: String

  EC2InstanceProfile:
    Type: String

  PrivateSubnetA:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnetB:
    Type: AWS::EC2::Subnet::Id

  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  TargetGroupArn:
    Type: String

  ECSTaskExecutionRole:
    Type: String

  ECRImage:
    Description: The ECR image of the docker container to be deployed
    Type: String

  CorsOrigins:
    Type: String

  DBInstanceEndpoint:
    Type: String

  DBInstancePort:
    Type: String

  DBName:
    Type: String

  # DBMasterUserSecretArn:
  #   Type: String

Conditions:
  IsDevelopment:
    Fn::Equals:
      - Ref: Environment
      - development

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${Environment}-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Sub: learning-tracking-${Environment}
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Ref: ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: migration
          Image:
            Ref: ECRImage
          Essential: false
          Command:
            - npm
            - run
            - prisma_migrate
          Environment:
            - Name: DATABASE_URL
              Value:
                Fn::Sub: postgresql://MyName:MyPassword@${DBInstanceEndpoint}:${DBInstancePort}/${DBName}

        - Name:
            Fn::Sub: learning-tracking-${Environment}
          Essential: true
          DependsOn:
            - Condition: SUCCESS
              ContainerName: migration
          Cpu: 512
          Memory: 1024
          Image:
            Ref: ECRImage
          Environment:
            - Name: CORS_ORIGINS
              Value:
                Ref: CorsOrigins
            - Name: DATABASE_URL
              Value:
                Fn::Sub: postgresql://MyName:MyPassword@${DBInstanceEndpoint}:${DBInstancePort}/${DBName}

            # - Name: DATABASE_URL
            #   Value:
            #     Fn::Sub:
            #       - >-
            #         postgresql://MyName:MyPassword@${DBInstanceEndpoint}:${DBInstancePort}/${DBName}
            # - DBPassword:
            #     Fn::Sub: '{{resolve:secretsmanager:${DBMasterUserSecretArn}:SecretString:password}}'

          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group:
                Fn::Sub: /ecs/Nodejs-app-${Environment}
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName:
        Fn::Sub: learning-tracking-${Environment}
      Cluster:
        Ref: ECSCluster
      CapacityProviderStrategy:
        - Base: 1
          CapacityProvider: FARGATE
          Weight: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 300
      LoadBalancers:
        - ContainerName:
            Fn::Sub: learning-tracking-${Environment}
          ContainerPort: 3000
          TargetGroupArn:
            Ref: TargetGroupArn

      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - Ref: InstancesSecurityGroup
          Subnets:
            - Ref: PrivateSubnetA
            - Ref: PrivateSubnetB
      PlatformVersion: LATEST
      TaskDefinition:
        Ref: TaskDefinition

  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 1
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId:
        Fn::Sub: service/${ECSCluster}/${Service.Name}

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      PolicyName: ECSContainerServiceScalingPolicy
      ScalingTargetId:
        Ref: ServiceScalableTarget

      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 180
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
